
hoi

<!-- Container for the page. One row per item (commentary, playground, multiplayer, etc.) -->
<div class="container-fluid">

    <div class="row"> <!-- Row that contains the columns and commentary --> 
        <div *ngFor="let column_to_display of this.columns" 
            class="col overflow_column" 
            [hidden]="!column_to_display.visible" 
            cdkScrollable>
                <ng-container [ngTemplateOutlet]='fragment_column_template' 
                    [ngTemplateOutletContext]="{given_column:column_to_display}">
                </ng-container>
        </div>

        <!-- Column with commentary, shown if a fragment from the edition of reference is clicked -->
        <div *ngIf="commentary_enabled" class="col overflow_column">
            <!-- Show either fragment data or the fact that no fragment has been selected yet. -->
            <div *ngIf="this.fragment_clicked; else no_fragment_clicked">
                <!-- Fragment information -->
                <h5>Selected 
                    <a class='a-void' (click)="this.request_introduction(this.current_fragment.author)">{{this.current_fragment.author}}</a>, <!-- Do not forget the comma and space -->
                    <a class='a-void' (click)="this.request_introduction(this.current_fragment.title)">{{this.current_fragment.title}}</a>, 
                    {{this.current_fragment.editor}}, 
                    {{this.current_fragment.name}}
                </h5>
            </div>
            <ng-template #no_fragment_clicked><h5>Click a fragment to show its content.</h5></ng-template>

            <!-- Show banner if no commentary available -->
            <div *ngIf="!this.current_fragment.has_content() && this.fragment_clicked;" class="alert alert-info" role="alert">
                No content is available yet for this specific fragment.
            </div>
            
            <!-- Show the commentary for the clicked fragment -->
            <div *ngIf="this.current_fragment.has_content();">
                <ng-container [ngTemplateOutlet]='commentary_column_template' [ngTemplateOutletContext]="{given_fragment:this.current_fragment}"></ng-container>
            </div>
           
            <div *ngFor="let linked_fragment of this.commentary_column.linked_fragments_content">
                <div *ngIf="linked_fragment.has_content();">
                    <h6>Linked commentary from {{linked_fragment.author}}, {{linked_fragment.title}}, 
                        {{linked_fragment.editor}}, {{linked_fragment.name}}
                    </h6>
                    <ng-container [ngTemplateOutlet]='commentary_column_template' [ngTemplateOutletContext]="{given_fragment:linked_fragment}"></ng-container>    
                </div>
            </div>

        </div>
        <!-- <hr> -->
    </div> <!-- This closes the first row. Other items will be put under this row -->
    


    <!-- Loading spinner to show data is being retrieved from the server -->
    <mat-toolbar *ngIf="this.utility.spinner === false" class="progress-toolbar-playground"></mat-toolbar>
    <mat-progress-bar *ngIf="this.utility.spinner" mode="query"></mat-progress-bar>
    <!-- Row to show the playground -->
    <hr>

    <div class="container-fluid playground-height-padding" *ngIf="playground_enabled">               
        <!-- First we display all buttons to control the playground -->
        <div class="row">        
            <!-- The first row contains the edition/fragment selection -->
            <div class="col-3"> <ng-container *ngTemplateOutlet="select_author;context:{column: this.playground}"></ng-container> </div>
            <div class="col-3"> <ng-container *ngTemplateOutlet="select_title;context:{column: this.playground}"></ng-container> </div>
            <div class="col-3"> <ng-container *ngTemplateOutlet="select_editor;context:{column: this.playground}"></ng-container> </div>   
            
            <div class="col-3">
                <button mat-stroked-button 
                    class="button-margin"
                    class="button-margin"
                    [matMenuTriggerFor]="fragment_selection">
                    {{ this.playground.name }}
                    <mat-icon fontIcon="expand_more" style="float: right"></mat-icon>
                </button>
                <mat-menu #fragment_selection="matMenu">
                    <ng-container *ngFor="let fragment_name of this.playground.fragment_names">
                        <button mat-menu-item
                            (click)="this.playground.fragment_name = fragment_name"
                            (click)="add_single_fragment_to_playground(this.playground, fragment_name)">
                            {{ fragment_name }}
                        </button>
                    </ng-container>
                </mat-menu>                               
            </div>
        </div>

        <div class="div-padding-sm"></div>

        <div class="row">        
            <!-- The second row contains all buttons to control the flow of fragments and notes -->
            <div class="col-3"> <button mat-stroked-button (click)="this.request_fragments(this.playground)">Add selected edition</button> </div>
            <div class="col-3"> <button mat-stroked-button color="accent" (click)="this.delete_clicked_item_from_playground(this.playground, 'fragment')">Delete clicked fragment</button> </div>
            <div class="col-3"> <button mat-stroked-button color="accent" (click)="this.delete_clicked_item_from_playground(this.playground, 'note')">Delete clicked note</button> </div>
            <div class="col-3"> <button mat-stroked-button color="warn" (click)="this.playground.fragments = []; this.playground.note_array = [];">Clear playground</button> </div>
        </div>
        
        <div class="div-padding-lg"></div>
        <!-- Possibility to add a little note -->
        <div class="row">        
            <div mat-dialog-content class="col-6">
                <mat-form-field class="input-form" style="--width: 100%;">
                    <input matInput placeholder="Add a note" ngDefaultControl [(ngModel)]='note'>
                    <button type="button" mat-icon-button matSuffix (click)="this.playground.note_array = this.utility.push_to_array(note, this.playground.note_array)">
                        <mat-icon>{{'add'}}</mat-icon>
                    </button>
                    <mat-hint>To organise your edition</mat-hint>
                </mat-form-field>               
            </div>  
        </div>

        <hr>
        <!-- For loop to print all the notes -->
        <div *ngFor="let note of this.playground.note_array" class="note zlayer" style="--layer: 3;" (click)="this.playground.clicked_note = note" cdkDrag>
            {{note}}
        </div>
        <!-- For loop to print all the base selected fragments -->
        <!-- Recording the clicked fragment allows us to delete it when pressing the delete button -->
        <!-- Also, keep track whether we are dragging or not. If we drag, we do not want the click event to fire -->
        <div *ngFor="let fragment of this.playground.fragments" 
            class="playground zlayer" 
            style="--layer: 2;" 
            cdkDrag 
            (cdkDragStarted)="this.playground_dragging = true"
            (click)="this.handle_fragment_click(fragment, true)"
            (click)="this.playground.clicked_fragment = fragment">
            
            <div *ngIf="this.oscc_settings.show_headers"><b [style.color]="fragment.colour">Fragment {{fragment.name}} </b> &nbsp; <sup>{{fragment.author}}, {{fragment.title}}, {{fragment.editor}}</sup> &nbsp; <i>{{fragment.status}}</i></div>

            <div *ngFor="let fragment_line of fragment.lines">           
                <p *ngIf="this.oscc_settings.show_line_names; else no_line_names_playground" [innerHTML]="fragment_line.line_number + ': ' + fragment_line.text | safeHtml"></p>
                <ng-template #no_line_names_playground>
                    <!--safeHtml to allow whitespaces made by spans-->
                    <p [innerHTML]="fragment_line.text | safeHtml"></p>
                </ng-template>
            </div> 
        </div>
    </div> <!-- Closes the row -->
</div>

<!-- TEMPLATES -->

<!-- Template for a fragment column -->
<ng-template #fragment_column_template let-given_column="given_column" let-hint="hint">  
    
    <!-- <div class="row"> -->
        <!--  
        <ng-container *ngTemplateOutlet="select_author;context:{column: given_column}"></ng-container>
        <ng-container *ngTemplateOutlet="select_title;context:{column: given_column}"></ng-container>
        <ng-container *ngTemplateOutlet="select_editor;context:{column: given_column}"></ng-container>        -->
    <!-- </div> -->

    <div class="div-padding-sm"></div>

    <!-- Fragments loop to display all fragments of the chosen edition of reference -->
    <div class="row">
        <!-- Columns are connected via the cdkDropListConnectedTo property. -->
        <div cdkDropList id="{{given_column.column_id}}" 
            [cdkDropListData]="given_column.fragments" 
            [cdkDropListConnectedTo]="connected_columns_list" 
            (cdkDropListDropped)="this.utility.drop($event)">
            <div *ngFor="let fragment of given_column.fragments">
                <div class="fragment-box" (click)="handle_fragment_click(fragment)" 
                    cdkDrag
                    [cdkDragDisabled]="this.oscc_settings.dragging_disabled"
                    (cdkDragDropped)="this.track_edited_columns($event)"
                    [attr.id]="fragment.fragment_id"
                    [style.border-left-color]="this.generate_fragment_gradient_border_color(given_column.fragments.length, given_column.orig_fragment_order.indexOf(fragment.name))"
                    [style.background-color]="this.generate_fragment_gradient_background_color(given_column.fragments.length, given_column.orig_fragment_order.indexOf(fragment.name))">
                    <div *ngIf="this.oscc_settings.show_headers">
                        <b [style.color]="fragment.colour">Fragment {{fragment.name}} </b> &nbsp; <sup>{{fragment.author}}, {{fragment.title}}, {{fragment.editor}}</sup> &nbsp; <i>{{fragment.status}}</i>
                    </div>
                    <div *ngFor="let fragment_line of fragment.lines">      
                        <p *ngIf="this.oscc_settings.show_line_names; else no_line_names" [innerHTML]="fragment_line.line_number + ': ' + fragment_line.text | safeHtml"></p>
                        <ng-template #no_line_names>
                            <!--safeHtml to allow whitespaces made by spans-->
                            <p [innerHTML]="fragment_line.text | safeHtml"></p>
                        </ng-template>
                    </div>  
                </div>
            </div>
        </div> 
    </div>
</ng-template>

<ng-template #commentary_column_template let-given_fragment="given_fragment">  

    <ng-container *ngTemplateOutlet="show_fragment_content;
        context:{current_fragment_content: given_fragment.translation, title:'Fragment Translation'}">
    </ng-container> <!-- Show the translation of the fragment -->           

    <ng-container *ngTemplateOutlet="show_fragment_content;
        context:{current_fragment_content: given_fragment.apparatus, title:'Apparatus Criticus'}">
    </ng-container> <!-- Show the apparatus criticus of the fragment -->

    <ng-container *ngTemplateOutlet="show_fragment_content;
        context:{current_fragment_content: given_fragment.differences, title:'Editorial Differences'}">
    </ng-container> <!-- Show the fragment differences -->

    <ng-container *ngIf="!this.utility.is_empty_array(given_fragment.context)">
        <div *ngFor="let current_context of given_fragment.context">
            <mat-expansion-panel>
                <mat-expansion-panel-header>
                    <mat-panel-title>
                        <b>Citation Context</b>
                    </mat-panel-title>
                    <div>{{current_context.author}} <i>{{current_context.location}}</i></div><div class="div-padding-sm"></div>
                </mat-expansion-panel-header>
                <div class="mat-expansion-panel-content">
                    <div class="mat-expansion-panel-body">
                        <div [innerHTML]="current_context.text"></div>
                    </div>
                </div>
            </mat-expansion-panel>
        </div><hr> <!-- Show all context items for the selected fragment -->
    </ng-container>

    <ng-container 
        *ngTemplateOutlet="show_fragment_content;context:{current_fragment_content: given_fragment.commentary, title:'Fragment Commentary'}">
    </ng-container> <!-- Show the fragment commentary -->

    <ng-container 
        *ngTemplateOutlet="show_fragment_content;context:{current_fragment_content: given_fragment.reconstruction, title:'Fragment Reconstruction'}">
    </ng-container> <!-- Show the fragment reconstruction -->

</ng-template>

<!-- Template for the select author mat-option field -->
<ng-template #select_author let-column="column" let-hint="hint">  

    <button mat-stroked-button 
        class="button-margin"
        class="button-margin"
        [matMenuTriggerFor]="author_selection">
        <div>
            <span style="vertical-align: middle">{{ column.selected_fragment_author }}</span>
            <mat-icon fontIcon="expand_more" style="float: right"></mat-icon>
        </div>
    </button>
    <mat-menu #author_selection="matMenu">
    <ng-container *ngFor="let author of column.retrieved_authors">
            <button mat-menu-item
                (click)="column.selected_fragment_author = author"
                (click)="this.api.request_titles(column)"
                
                (click)="column.selected_fragment_title = 'Title'"
                (click)="column.retrieved_titles = []"

                (click)="column.selected_fragment_editor = 'Editor'"
                (click)="column.retrieved_editors = []">
                    {{ author }}
            </button>
    </ng-container>
    </mat-menu>

    <!-- Deprecated since mat-form-field is so uncooperative now -->
    <!-- <mat-form-field class="selection-form" appearance="outline">
        <mat-label>Author</mat-label>
        <mat-select>
            <mat-option *ngFor="let author of column.retrieved_authors" [value]="author"
                (click)="column.selected_fragment_author = author"
                (click)="this.request_titles(column)">
                {{ author }} 
            </mat-option>
        </mat-select>
        <mat-hint>{{hint}}</mat-hint>
    </mat-form-field>  -->
</ng-template>

<!-- Template for the select text title mat-option field -->
<ng-template #select_title let-column="column" let-hint="hint">   
    
    <button mat-stroked-button
        class="button-margin"
        class="button-margin"
        [matMenuTriggerFor]="title_selection">
        <div>
            <span style="vertical-align: middle">{{ column.selected_fragment_title }}</span>
            <mat-icon fontIcon="expand_more" style="float: right"></mat-icon>
        </div>
    </button>
    <mat-menu #title_selection="matMenu">
        <ng-container *ngFor="let title of column.retrieved_titles">
                <button mat-menu-item
                    (click)="column.selected_fragment_title = title"
                    (click)="this.api.request_editors(column)"
                    
                    (click)="column.selected_fragment_editor = 'Editor'"
                    (click)="column.retrieved_editors = []">
                        {{ title }}
                </button>
        </ng-container>
    </mat-menu>    
    
    <!-- Deprecated since mat-form-field is so uncooperative now -->
    <!-- <mat-form-field class="selection-form">
        <mat-label>Text</mat-label>
        <mat-select>
            <mat-option *ngFor="let title of column.retrieved_titles" [value]="title" 
                (click)="column.selected_fragment_title = title.name"
                (click)="this.request_editors(column)">
                {{ title.name }}                
            </mat-option>
        </mat-select>
        <mat-hint>{{hint}}</mat-hint>
    </mat-form-field> -->
</ng-template>

<!-- Template for the select editor mat-option field -->
<ng-template #select_editor let-column="column" let-hint="hint">   
    
    <button mat-stroked-button
        class="button-margin" 
        class="button-margin" 
        [matMenuTriggerFor]="editor_selection">
        <div>
            <span style="vertical-align: middle">{{ column.selected_fragment_editor }}</span>
            <mat-icon fontIcon="expand_more" style="float: right"></mat-icon>
        </div>
    </button>
    <mat-menu #editor_selection="matMenu">
        <ng-container *ngFor="let editor of column.retrieved_editors">
                <button mat-menu-item
                    (click)="column.selected_fragment_editor = editor"
                    (click)="this.handle_editor_click(column)">
                        {{ editor }}
                </button>
        </ng-container>
    </mat-menu>          
    
    <!-- Deprecated since mat-form-field is so uncooperative now -->
    <!-- <mat-form-field class="selection-form">
        <mat-label>Edition</mat-label>
        <ng-container *ngIf="column.name != 'playground'; else playground_editor_select">
            <mat-select>
                <mat-option 
                *ngFor="let editor of column.retrieved_editors" 
                [value]="editor"
                (click)="column.selected_fragment_editor = editor.name"
                (click)="this.request_fragments(column)">
                {{ editor.name }}                     
                </mat-option>
            </mat-select>
        </ng-container>
        <ng-template #playground_editor_select>
          <mat-select>
            <mat-option 
              *ngFor="let editor of column.retrieved_editors" 
              [value]="editor"
              (click)="column.selected_fragment_editor = editor.name"
              (click)="this.request_fragment_names(column)">
              {{ editor.name }}                     
            </mat-option>
          </mat-select>
        </ng-template>

        <mat-hint>{{hint}}</mat-hint>
    </mat-form-field> -->
</ng-template>
       
<!-- Template to show fragment content from the given fragment in a mat expansion panel -->
<ng-template #show_fragment_content let-current_fragment_content="current_fragment_content" let-title="title">   
    <ng-container *ngIf="current_fragment_content != ''"> <!-- do not generate fields if content is empty -->
        <mat-expansion-panel *ngIf="current_fragment_content">
            <mat-expansion-panel-header>
                <mat-panel-title>
                    <b>{{title}}</b>
                </mat-panel-title>
            </mat-expansion-panel-header>
            <div class="mat-expansion-panel-content">
                <div class="mat-expansion-panel-body">
                    <div [innerHTML]="current_fragment_content"></div>
                </div>
            </div>
        </mat-expansion-panel>
        <hr> <!-- And add a nice line to separate the fields -->
    </ng-container>
</ng-template>